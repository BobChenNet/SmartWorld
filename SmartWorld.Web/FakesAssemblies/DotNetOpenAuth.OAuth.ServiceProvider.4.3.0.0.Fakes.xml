<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetOpenAuth.OAuth.ServiceProvider.4.3.0.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory 的填充码类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory.#ctor(DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory.AllInstances.GetNewRequestMessageMessageReceivingEndpointIDictionaryOfStringString">
            <summary>设置 OAuthServiceProviderMessageFactory.GetNewRequestMessage(MessageReceivingEndpoint recipient, IDictionary`2&lt;String,String&gt; fields) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory.AllInstances.GetNewResponseMessageIDirectedProtocolMessageIDictionaryOfStringString">
            <summary>设置 OAuthServiceProviderMessageFactory.GetNewResponseMessage(IDirectedProtocolMessage request, IDictionary`2&lt;String,String&gt; fields) 的 填充码</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory.Bind(DotNetOpenAuth.Messaging.IMessageFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory.ConstructorIServiceProviderTokenManager">
            <summary>设置 OAuthServiceProviderMessageFactory.OAuthServiceProviderMessageFactory(IServiceProviderTokenManager tokenManager) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory.GetNewRequestMessageMessageReceivingEndpointIDictionaryOfStringString">
            <summary>设置 OAuthServiceProviderMessageFactory.GetNewRequestMessage(MessageReceivingEndpoint recipient, IDictionary`2&lt;String,String&gt; fields) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthServiceProviderMessageFactory.GetNewResponseMessageIDirectedProtocolMessageIDictionaryOfStringString">
            <summary>设置 OAuthServiceProviderMessageFactory.GetNewResponseMessage(IDirectedProtocolMessage request, IDictionary`2&lt;String,String&gt; fields) 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ServiceProviderSigningBindingElement 的填充码类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.#ctor(DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ServiceProviderSigningBindingElement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.AllInstances.Clone">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.Clone() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.AllInstances.GetSignatureITamperResistantOAuthMessage">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.GetSignature(ITamperResistantOAuthMessage message) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.AllInstances.IsSignatureValidITamperResistantOAuthMessage">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.IsSignatureValid(ITamperResistantOAuthMessage message) 的 填充码</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.Bind(DotNetOpenAuth.Messaging.IChannelBindingElement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.Bind(DotNetOpenAuth.Messaging.ITamperProtectionChannelBindingElement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.Clone">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.Clone() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.ConstructorIServiceProviderTokenManager">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.RsaSha1ServiceProviderSigningBindingElement(IServiceProviderTokenManager tokenManager) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.GetSignatureITamperResistantOAuthMessage">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.GetSignature(ITamperResistantOAuthMessage message) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ServiceProviderSigningBindingElement.IsSignatureValidITamperResistantOAuthMessage">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.IsSignatureValid(ITamperResistantOAuthMessage message) 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.IConsumerDescription 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.#ctor">
            <summary>初始化 type StubIConsumerDescription 的新实例</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.DotNetOpenAuth#OAuth#ChannelElements#IConsumerDescription#Callback">
            <summary>设置 IConsumerDescription.get_Callback() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.CallbackGet">
            <summary>设置 IConsumerDescription.get_Callback() 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.DotNetOpenAuth#OAuth#ChannelElements#IConsumerDescription#Certificate">
            <summary>设置 IConsumerDescription.get_Certificate() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.CertificateGet">
            <summary>设置 IConsumerDescription.get_Certificate() 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.DotNetOpenAuth#OAuth#ChannelElements#IConsumerDescription#Key">
            <summary>设置 IConsumerDescription.get_Key() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.KeyGet">
            <summary>设置 IConsumerDescription.get_Key() 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.DotNetOpenAuth#OAuth#ChannelElements#IConsumerDescription#Secret">
            <summary>设置 IConsumerDescription.get_Secret() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.SecretGet">
            <summary>设置 IConsumerDescription.get_Secret() 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.DotNetOpenAuth#OAuth#ChannelElements#IConsumerDescription#VerificationCodeFormat">
            <summary>设置 IConsumerDescription.get_VerificationCodeFormat() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.VerificationCodeFormatGet">
            <summary>设置 IConsumerDescription.get_VerificationCodeFormat() 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.DotNetOpenAuth#OAuth#ChannelElements#IConsumerDescription#VerificationCodeLength">
            <summary>设置 IConsumerDescription.get_VerificationCodeLength() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerDescription.VerificationCodeLengthGet">
            <summary>设置 IConsumerDescription.get_VerificationCodeLength() 的 stub</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderAccessToken">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderAccessToken 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderAccessToken.#ctor">
            <summary>初始化 type StubIServiceProviderAccessToken 的新实例</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderAccessToken.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderAccessToken#ExpirationDate">
            <summary>设置 IServiceProviderAccessToken.get_ExpirationDate() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderAccessToken.ExpirationDateGet">
            <summary>设置 IServiceProviderAccessToken.get_ExpirationDate() 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderAccessToken.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderAccessToken#Roles">
            <summary>设置 IServiceProviderAccessToken.get_Roles() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderAccessToken.RolesGet">
            <summary>设置 IServiceProviderAccessToken.get_Roles() 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderAccessToken.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderAccessToken#Token">
            <summary>设置 IServiceProviderAccessToken.get_Token() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderAccessToken.TokenGet">
            <summary>设置 IServiceProviderAccessToken.get_Token() 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderAccessToken.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderAccessToken#Username">
            <summary>设置 IServiceProviderAccessToken.get_Username() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderAccessToken.UsernameGet">
            <summary>设置 IServiceProviderAccessToken.get_Username() 的 stub</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderRequestToken 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.#ctor">
            <summary>初始化 type StubIServiceProviderRequestToken 的新实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.AttachBackingFieldToCallback">
            <summary>附加委托以将 StubIServiceProviderRequestToken.Callback 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.AttachBackingFieldToConsumerVersion">
            <summary>附加委托以将 StubIServiceProviderRequestToken.ConsumerVersion 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.AttachBackingFieldToVerificationCode">
            <summary>附加委托以将 StubIServiceProviderRequestToken.VerificationCode 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderRequestToken#Callback">
            <summary>设置 IServiceProviderRequestToken.get_Callback() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.CallbackGet">
            <summary>设置 IServiceProviderRequestToken.get_Callback() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.CallbackSetUri">
            <summary>设置 IServiceProviderRequestToken.set_Callback(Uri value) 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderRequestToken#ConsumerKey">
            <summary>设置 IServiceProviderRequestToken.get_ConsumerKey() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.ConsumerKeyGet">
            <summary>设置 IServiceProviderRequestToken.get_ConsumerKey() 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderRequestToken#ConsumerVersion">
            <summary>设置 IServiceProviderRequestToken.get_ConsumerVersion() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.ConsumerVersionGet">
            <summary>设置 IServiceProviderRequestToken.get_ConsumerVersion() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.ConsumerVersionSetVersion">
            <summary>设置 IServiceProviderRequestToken.set_ConsumerVersion(Version value) 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderRequestToken#CreatedOn">
            <summary>设置 IServiceProviderRequestToken.get_CreatedOn() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.CreatedOnGet">
            <summary>设置 IServiceProviderRequestToken.get_CreatedOn() 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderRequestToken#Token">
            <summary>设置 IServiceProviderRequestToken.get_Token() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.TokenGet">
            <summary>设置 IServiceProviderRequestToken.get_Token() 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderRequestToken#VerificationCode">
            <summary>设置 IServiceProviderRequestToken.get_VerificationCode() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.VerificationCodeGet">
            <summary>设置 IServiceProviderRequestToken.get_VerificationCode() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderRequestToken.VerificationCodeSetString">
            <summary>设置 IServiceProviderRequestToken.set_VerificationCode(String value) 的 stub</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.#ctor">
            <summary>初始化 type StubIServiceProviderTokenManager 的新实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderTokenManager#GetAccessToken(System.String)">
            <summary>设置 IServiceProviderTokenManager.GetAccessToken(String token) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderTokenManager#GetConsumer(System.String)">
            <summary>设置 IServiceProviderTokenManager.GetConsumer(String consumerKey) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderTokenManager#GetRequestToken(System.String)">
            <summary>设置 IServiceProviderTokenManager.GetRequestToken(String token) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderTokenManager#IsRequestTokenAuthorized(System.String)">
            <summary>设置 IServiceProviderTokenManager.IsRequestTokenAuthorized(String requestToken) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderTokenManager#UpdateToken(DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderRequestToken)">
            <summary>设置 IServiceProviderTokenManager.UpdateToken(IServiceProviderRequestToken token) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.DotNetOpenAuth#OAuth#ChannelElements#ITokenManager#ExpireRequestTokenAndStoreNewAccessToken(System.String,System.String,System.String,System.String)">
            <summary>设置 ITokenManager.ExpireRequestTokenAndStoreNewAccessToken(String consumerKey, String requestToken, String accessToken, String accessTokenSecret) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.DotNetOpenAuth#OAuth#ChannelElements#ITokenManager#GetTokenSecret(System.String)">
            <summary>设置 ITokenManager.GetTokenSecret(String token) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.DotNetOpenAuth#OAuth#ChannelElements#ITokenManager#GetTokenType(System.String)">
            <summary>设置 ITokenManager.GetTokenType(String token) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.DotNetOpenAuth#OAuth#ChannelElements#ITokenManager#StoreNewRequestToken(DotNetOpenAuth.OAuth.Messages.UnauthorizedTokenRequest,DotNetOpenAuth.OAuth.Messages.ITokenSecretContainingMessage)">
            <summary>设置 ITokenManager.StoreNewRequestToken(UnauthorizedTokenRequest request, ITokenSecretContainingMessage response) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.ExpireRequestTokenAndStoreNewAccessTokenStringStringStringString">
            <summary>设置 ITokenManager.ExpireRequestTokenAndStoreNewAccessToken(String consumerKey, String requestToken, String accessToken, String accessTokenSecret) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.GetAccessTokenString">
            <summary>设置 IServiceProviderTokenManager.GetAccessToken(String token) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.GetConsumerString">
            <summary>设置 IServiceProviderTokenManager.GetConsumer(String consumerKey) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.GetRequestTokenString">
            <summary>设置 IServiceProviderTokenManager.GetRequestToken(String token) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.GetTokenSecretString">
            <summary>设置 ITokenManager.GetTokenSecret(String token) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.GetTokenTypeString">
            <summary>设置 ITokenManager.GetTokenType(String token) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.IsRequestTokenAuthorizedString">
            <summary>设置 IServiceProviderTokenManager.IsRequestTokenAuthorized(String requestToken) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.StoreNewRequestTokenUnauthorizedTokenRequestITokenSecretContainingMessage">
            <summary>设置 ITokenManager.StoreNewRequestToken(UnauthorizedTokenRequest request, ITokenSecretContainingMessage response) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIServiceProviderTokenManager.UpdateTokenIServiceProviderRequestToken">
            <summary>设置 IServiceProviderTokenManager.UpdateToken(IServiceProviderRequestToken token) 的 stub</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubITokenGenerator">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.ITokenGenerator 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubITokenGenerator.#ctor">
            <summary>初始化 type StubITokenGenerator 的新实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubITokenGenerator.DotNetOpenAuth#OAuth#ChannelElements#ITokenGenerator#GenerateAccessToken(System.String)">
            <summary>设置 ITokenGenerator.GenerateAccessToken(String consumerKey) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubITokenGenerator.DotNetOpenAuth#OAuth#ChannelElements#ITokenGenerator#GenerateRequestToken(System.String)">
            <summary>设置 ITokenGenerator.GenerateRequestToken(String consumerKey) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubITokenGenerator.DotNetOpenAuth#OAuth#ChannelElements#ITokenGenerator#GenerateSecret">
            <summary>设置 ITokenGenerator.GenerateSecret() 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubITokenGenerator.GenerateAccessTokenString">
            <summary>设置 ITokenGenerator.GenerateAccessToken(String consumerKey) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubITokenGenerator.GenerateRequestTokenString">
            <summary>设置 ITokenGenerator.GenerateRequestToken(String consumerKey) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubITokenGenerator.GenerateSecret">
            <summary>设置 ITokenGenerator.GenerateSecret() 的 stub</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthServiceProviderMessageFactory">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthServiceProviderMessageFactory.#ctor(DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthServiceProviderMessageFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthServiceProviderMessageFactory.GetNewRequestMessage(DotNetOpenAuth.Messaging.MessageReceivingEndpoint,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>设置 OAuthServiceProviderMessageFactory.GetNewRequestMessage(MessageReceivingEndpoint recipient, IDictionary`2&lt;String,String&gt; fields) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthServiceProviderMessageFactory.GetNewRequestMessageMessageReceivingEndpointIDictionaryOfStringString">
            <summary>设置 OAuthServiceProviderMessageFactory.GetNewRequestMessage(MessageReceivingEndpoint recipient, IDictionary`2&lt;String,String&gt; fields) 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthServiceProviderMessageFactory.GetNewResponseMessage(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>设置 OAuthServiceProviderMessageFactory.GetNewResponseMessage(IDirectedProtocolMessage request, IDictionary`2&lt;String,String&gt; fields) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthServiceProviderMessageFactory.GetNewResponseMessageIDirectedProtocolMessageIDictionaryOfStringString">
            <summary>设置 OAuthServiceProviderMessageFactory.GetNewResponseMessage(IDirectedProtocolMessage request, IDictionary`2&lt;String,String&gt; fields) 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthServiceProviderMessageFactory.InitializeStub">
            <summary>初始化 type StubOAuthServiceProviderMessageFactory 的新实例</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthServiceProviderMessageFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthServiceProviderMessageFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ServiceProviderSigningBindingElement 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.#ctor(DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.Clone">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.Clone() 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.Clone01">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.Clone() 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.GetSignature(DotNetOpenAuth.OAuth.ChannelElements.ITamperResistantOAuthMessage)">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.GetSignature(ITamperResistantOAuthMessage message) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.GetSignatureITamperResistantOAuthMessage">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.GetSignature(ITamperResistantOAuthMessage message) 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.InitializeStub">
            <summary>初始化 type StubRsaSha1ServiceProviderSigningBindingElement 的新实例</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.IsMessageApplicable(DotNetOpenAuth.OAuth.ChannelElements.ITamperResistantOAuthMessage)">
            <summary>设置 SigningBindingElementBase.IsMessageApplicable(ITamperResistantOAuthMessage message) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.IsMessageApplicableITamperResistantOAuthMessage">
            <summary>设置 SigningBindingElementBase.IsMessageApplicable(ITamperResistantOAuthMessage message) 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.IsSignatureValid(DotNetOpenAuth.OAuth.ChannelElements.ITamperResistantOAuthMessage)">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.IsSignatureValid(ITamperResistantOAuthMessage message) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ServiceProviderSigningBindingElement.IsSignatureValidITamperResistantOAuthMessage">
            <summary>设置 RsaSha1ServiceProviderSigningBindingElement.IsSignatureValid(ITamperResistantOAuthMessage message) 的 stub</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider">
            <summary>DotNetOpenAuth.OAuth.ServiceProvider 的填充码类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.#ctor(DotNetOpenAuth.OAuth.ServiceProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ChannelGet">
            <summary>设置 ServiceProvider.get_Channel() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.CreatePrincipalAccessProtectedResourceRequest">
            <summary>设置 ServiceProvider.CreatePrincipal(AccessProtectedResourceRequest request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.Dispose">
            <summary>设置 ServiceProvider.Dispose() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.DisposeBoolean">
            <summary>设置 ServiceProvider.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.PrepareAccessTokenMessageAuthorizedTokenRequest">
            <summary>设置 ServiceProvider.PrepareAccessTokenMessage(AuthorizedTokenRequest request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.PrepareAuthorizationResponseUserAuthorizationRequest">
            <summary>设置 ServiceProvider.PrepareAuthorizationResponse(UserAuthorizationRequest request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.PrepareAuthorizationResponseUserAuthorizationRequestUri">
            <summary>设置 ServiceProvider.PrepareAuthorizationResponse(UserAuthorizationRequest request, Uri callback) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.PrepareUnauthorizedTokenMessageUnauthorizedTokenRequest">
            <summary>设置 ServiceProvider.PrepareUnauthorizedTokenMessage(UnauthorizedTokenRequest request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ReadAccessTokenRequest">
            <summary>设置 ServiceProvider.ReadAccessTokenRequest() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ReadAccessTokenRequestHttpRequestBase">
            <summary>设置 ServiceProvider.ReadAccessTokenRequest(HttpRequestBase request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ReadAuthorizationRequest">
            <summary>设置 ServiceProvider.ReadAuthorizationRequest() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ReadAuthorizationRequestHttpRequestBase">
            <summary>设置 ServiceProvider.ReadAuthorizationRequest(HttpRequestBase request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ReadProtectedResourceAuthorization">
            <summary>设置 ServiceProvider.ReadProtectedResourceAuthorization() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ReadProtectedResourceAuthorizationHttpRequestBase">
            <summary>设置 ServiceProvider.ReadProtectedResourceAuthorization(HttpRequestBase request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ReadProtectedResourceAuthorizationHttpRequestMessagePropertyUri">
            <summary>设置 ServiceProvider.ReadProtectedResourceAuthorization(HttpRequestMessageProperty request, Uri requestUri) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ReadRequest">
            <summary>设置 ServiceProvider.ReadRequest() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ReadRequestHttpRequestBase">
            <summary>设置 ServiceProvider.ReadRequest(HttpRequestBase request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ReadTokenRequest">
            <summary>设置 ServiceProvider.ReadTokenRequest() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ReadTokenRequestHttpRequestBase">
            <summary>设置 ServiceProvider.ReadTokenRequest(HttpRequestBase request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.SecuritySettingsGet">
            <summary>设置 ServiceProvider.get_SecuritySettings() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.SecuritySettingsSetServiceProviderSecuritySettings">
            <summary>设置 ServiceProvider.set_SecuritySettings(ServiceProviderSecuritySettings value) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ServiceDescriptionGet">
            <summary>设置 ServiceProvider.get_ServiceDescription() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.ServiceDescriptionSetServiceProviderDescription">
            <summary>设置 ServiceProvider.set_ServiceDescription(ServiceProviderDescription value) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.TokenGeneratorGet">
            <summary>设置 ServiceProvider.get_TokenGenerator() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.TokenGeneratorSetITokenGenerator">
            <summary>设置 ServiceProvider.set_TokenGenerator(ITokenGenerator value) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.AllInstances.TokenManagerGet">
            <summary>设置 ServiceProvider.get_TokenManager() 的 填充码</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ChannelGet">
            <summary>设置 ServiceProvider.get_Channel() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ConstructorServiceProviderDescriptionIServiceProviderTokenManager">
            <summary>设置 ServiceProvider.ServiceProvider(ServiceProviderDescription serviceDescription, IServiceProviderTokenManager tokenManager) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ConstructorServiceProviderDescriptionIServiceProviderTokenManagerINonceStore">
            <summary>设置 ServiceProvider.ServiceProvider(ServiceProviderDescription serviceDescription, IServiceProviderTokenManager tokenManager, INonceStore nonceStore) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ConstructorServiceProviderDescriptionIServiceProviderTokenManagerINonceStoreOAuthServiceProviderMessageFactory">
            <summary>设置 ServiceProvider.ServiceProvider(ServiceProviderDescription serviceDescription, IServiceProviderTokenManager tokenManager, INonceStore nonceStore, OAuthServiceProviderMessageFactory messageTypeProvider) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ConstructorServiceProviderDescriptionIServiceProviderTokenManagerOAuthServiceProviderMessageFactory">
            <summary>设置 ServiceProvider.ServiceProvider(ServiceProviderDescription serviceDescription, IServiceProviderTokenManager tokenManager, OAuthServiceProviderMessageFactory messageTypeProvider) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.CreatePrincipalAccessProtectedResourceRequest">
            <summary>设置 ServiceProvider.CreatePrincipal(AccessProtectedResourceRequest request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.CreateVerificationCodeVerificationCodeFormatInt32">
            <summary>设置 ServiceProvider.CreateVerificationCode(VerificationCodeFormat format, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.Dispose">
            <summary>设置 ServiceProvider.Dispose() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.DisposeBoolean">
            <summary>设置 ServiceProvider.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.HttpApplicationStoreGet">
            <summary>设置 ServiceProvider.get_HttpApplicationStore() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.PrepareAccessTokenMessageAuthorizedTokenRequest">
            <summary>设置 ServiceProvider.PrepareAccessTokenMessage(AuthorizedTokenRequest request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.PrepareAuthorizationResponseUserAuthorizationRequest">
            <summary>设置 ServiceProvider.PrepareAuthorizationResponse(UserAuthorizationRequest request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.PrepareAuthorizationResponseUserAuthorizationRequestUri">
            <summary>设置 ServiceProvider.PrepareAuthorizationResponse(UserAuthorizationRequest request, Uri callback) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.PrepareUnauthorizedTokenMessageUnauthorizedTokenRequest">
            <summary>设置 ServiceProvider.PrepareUnauthorizedTokenMessage(UnauthorizedTokenRequest request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ReadAccessTokenRequest">
            <summary>设置 ServiceProvider.ReadAccessTokenRequest() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ReadAccessTokenRequestHttpRequestBase">
            <summary>设置 ServiceProvider.ReadAccessTokenRequest(HttpRequestBase request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ReadAuthorizationRequest">
            <summary>设置 ServiceProvider.ReadAuthorizationRequest() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ReadAuthorizationRequestHttpRequestBase">
            <summary>设置 ServiceProvider.ReadAuthorizationRequest(HttpRequestBase request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ReadProtectedResourceAuthorization">
            <summary>设置 ServiceProvider.ReadProtectedResourceAuthorization() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ReadProtectedResourceAuthorizationHttpRequestBase">
            <summary>设置 ServiceProvider.ReadProtectedResourceAuthorization(HttpRequestBase request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ReadProtectedResourceAuthorizationHttpRequestMessagePropertyUri">
            <summary>设置 ServiceProvider.ReadProtectedResourceAuthorization(HttpRequestMessageProperty request, Uri requestUri) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ReadRequest">
            <summary>设置 ServiceProvider.ReadRequest() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ReadRequestHttpRequestBase">
            <summary>设置 ServiceProvider.ReadRequest(HttpRequestBase request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ReadTokenRequest">
            <summary>设置 ServiceProvider.ReadTokenRequest() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ReadTokenRequestHttpRequestBase">
            <summary>设置 ServiceProvider.ReadTokenRequest(HttpRequestBase request) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.SecuritySettingsGet">
            <summary>设置 ServiceProvider.get_SecuritySettings() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.SecuritySettingsSetServiceProviderSecuritySettings">
            <summary>设置 ServiceProvider.set_SecuritySettings(ServiceProviderSecuritySettings value) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ServiceDescriptionGet">
            <summary>设置 ServiceProvider.get_ServiceDescription() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.ServiceDescriptionSetServiceProviderDescription">
            <summary>设置 ServiceProvider.set_ServiceDescription(ServiceProviderDescription value) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.TokenGeneratorGet">
            <summary>设置 ServiceProvider.get_TokenGenerator() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.TokenGeneratorSetITokenGenerator">
            <summary>设置 ServiceProvider.set_TokenGenerator(ITokenGenerator value) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimServiceProvider.TokenManagerGet">
            <summary>设置 ServiceProvider.get_TokenManager() 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.Fakes.StubServiceProvider">
            <summary>DotNetOpenAuth.OAuth.ServiceProvider 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubServiceProvider.#ctor(DotNetOpenAuth.OAuth.ServiceProviderDescription,DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubServiceProvider.#ctor(DotNetOpenAuth.OAuth.ServiceProviderDescription,DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager,DotNetOpenAuth.Messaging.Bindings.INonceStore)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubServiceProvider.#ctor(DotNetOpenAuth.OAuth.ServiceProviderDescription,DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager,DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubServiceProvider.#ctor(DotNetOpenAuth.OAuth.ServiceProviderDescription,DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager,DotNetOpenAuth.Messaging.Bindings.INonceStore,DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.StubServiceProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubServiceProvider.Dispose(System.Boolean)">
            <summary>设置 ServiceProvider.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.Fakes.StubServiceProvider.DisposeBoolean">
            <summary>设置 ServiceProvider.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubServiceProvider.InitializeStub">
            <summary>初始化 type StubServiceProvider 的新实例</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.StubServiceProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.StubServiceProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
